#version 440 core

const int LOCAL_WORK_GROUP_SIZE = 32;

const int L = 1000;
const int N = 512;
const float PI = 3.141592653589;

layout(binding = 0 ,rg32f) uniform image2D u_imageHt;
layout(binding = 1 ,rg32f) uniform image2D u_imageNx;
layout(binding = 2 ,rg32f) uniform image2D u_imageNz;

layout(local_size_x = LOCAL_WORK_GROUP_SIZE, local_size_y = LOCAL_WORK_GROUP_SIZE, local_size_z = 1) in;

vec2 ComplexMultiply(vec2 complex_1, vec2 complex_2);

void main()
{
	//通过gl_GlobalInvocationID来得知当前执行单元在全局工作组中的位置
	ivec2 storePos = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));

	vec2 k = vec2(2 * PI * (storePos.x - N / 2) / L, 2 * PI * (storePos.y - N / 2) / L);

	//根据位置storePos在贴图中采样得到数据
	vec2 ht = imageLoad(u_imageHt, storePos).xy;

	vec2 xNTilde = ComplexMultiply(vec2(0.0,k.x), ht);
	vec2 zNTilde = ComplexMultiply(vec2(0.0,k.y), ht);

	//将算出来的法线值存储到贴图当中
	imageStore(u_imageNx, storePos, vec4(xNTilde, 0.0, 0.0));
	imageStore(u_imageNz, storePos, vec4(zNTilde, 0.0, 0.0));
}

vec2 ComplexMultiply(vec2 complex_1, vec2 complex_2)
{
	float real = complex_1.x * complex_2.x + complex_1.y * complex_2.y * -1.0;
	float imag = complex_1.x * complex_2.y + complex_1.y * complex_2.x;
	return vec2(real, imag);
}